<?xml version="1.0" encoding="UTF-8"?>
<project name="brera" default="build">
    <property name="toolsdir" value="${basedir}/../vendor/bin/"/>
    <property name="projectdir" value="${basedir}/.."/>

    <target name="build"
            depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox"
            description=""/>

    <target name="build-parallel"
            depends="prepare,lint,tools-parallel,phpunit,phpdox"
            description=""/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${projectdir}/vendor"/>
        <delete file="${projectdir}/composer.lock"/>
        <delete dir="${projectdir}/build/api"/>
        <delete dir="${projectdir}/build/coverage"/>
        <delete dir="${projectdir}/build/logs"/>
        <delete dir="${projectdir}/build/pdepend"/>
        <delete dir="${projectdir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${projectdir}/build/api"/>
        <mkdir dir="${projectdir}/build/coverage"/>
        <mkdir dir="${projectdir}/build/logs"/>
        <mkdir dir="${projectdir}/build/pdepend"/>
        <mkdir dir="${projectdir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="download-composer" description="Downloads composer.phar (when it does not exist or is older than 30 days)">
        <tstamp>
            <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
        </tstamp>
        <delete>
            <fileset dir="${projectdir}">
                <include name="composer.phar" />
                <date datetime="${thirty.days.ago}" when="before"/>
            </fileset>
        </delete>
        <get src="https://getcomposer.org/composer.phar" dest="${projectdir}/composer.phar" skipexisting="true"/>
    </target>

    <target name="composer"
            depends="prepare,download-composer"
            description="Install dependencies with Composer">
        <exec executable="php" dir="${projectdir}">
            <arg value="composer.phar"/>
            <arg value="install"/>
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${projectdir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${projectdir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            depends="composer"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg path="${projectdir}/src" />
            <arg path="${projectdir}/tests" />
        </exec>
    </target>

    <target name="phploc-ci"
            depends="prepare,composer"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${projectdir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${projectdir}/build/logs/phploc.xml" />
            <arg path="${projectdir}/src" />
            <arg path="${projectdir}/tests" />
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare,composer"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${projectdir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${projectdir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${projectdir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${projectdir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            depends="composer"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${projectdir}/src" />
            <arg value="text" />
            <arg path="${projectdir}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="prepare,composer"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${projectdir}/src" />
            <arg value="xml" />
            <arg path="${projectdir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${projectdir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            depends="composer"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=${projectdir}/vendor/brera/coding-standards/src/Brera/" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${projectdir}/src" />
            <arg path="${projectdir}/tests" />
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare,composer"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${projectdir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${projectdir}/vendor/brera/coding-standards/src/Brera/" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${projectdir}/src" />
            <arg path="${projectdir}/tests" />
        </exec>
    </target>

    <target name="phpcpd"
            depends="composer"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcpd">
            <arg path="${projectdir}/src" />
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="prepare,composer"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${projectdir}/build/logs/pmd-cpd.xml" />
            <arg path="${projectdir}/src" />
        </exec>
    </target>

    <target name="phpunit"
            depends="unit-tests,integration-tests"
            description="Run all phpunit tests">
    </target>

    <target name="unit-tests"
            depends="prepare,composer"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${projectdir}/tests/Unit/phpunit.xml.dist"/>
            <arg value="--coverage-html"/>
            <arg path="${projectdir}/build/coverage"/>
            <arg value="--coverage-clover"/>
            <arg path="${projectdir}/build/logs/clover.xml"/>
            <arg value="--coverage-crap4j"/>
            <arg path="${projectdir}/build/logs/crap4j.xml"/>
            <arg value="--coverage-xml"/>
            <arg path="${projectdir}/build/logs/coverage"/>
            <arg value="--log-junit"/>
            <arg path="${projectdir}/build/logs/junit.xml"/>
        </exec>
    </target>

    <target name="integration-tests"
            depends="composer"
            description="Run integration tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${projectdir}/tests/Integration/phpunit.xml.dist"/>
        </exec>
    </target>

    <target name="phpdox"
            depends="composer,phploc-ci,phpcs-ci,phpmd-ci,unit-tests"
            description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox" dir="${projectdir}/build"/>
    </target>
</project>
